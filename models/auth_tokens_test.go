// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testAuthTokens(t *testing.T) {
	t.Parallel()

	query := AuthTokens(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAuthTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = authToken.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = AuthTokens(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AuthTokenSlice{authToken}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAuthTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AuthTokenExists(tx, authToken.Token)
	if err != nil {
		t.Errorf("Unable to check if AuthToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthTokenExistsG to return true, but got false.")
	}
}
func testAuthTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	authTokenFound, err := FindAuthToken(tx, authToken.Token)
	if err != nil {
		t.Error(err)
	}

	if authTokenFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAuthTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = AuthTokens(tx).Bind(authToken); err != nil {
		t.Error(err)
	}
}

func testAuthTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := AuthTokens(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authTokenOne := &AuthToken{}
	authTokenTwo := &AuthToken{}
	if err = randomize.Struct(seed, authTokenOne, authTokenDBTypes, false, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}
	if err = randomize.Struct(seed, authTokenTwo, authTokenDBTypes, false, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authTokenOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = authTokenTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := AuthTokens(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authTokenOne := &AuthToken{}
	authTokenTwo := &AuthToken{}
	if err = randomize.Struct(seed, authTokenOne, authTokenDBTypes, false, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}
	if err = randomize.Struct(seed, authTokenTwo, authTokenDBTypes, false, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authTokenOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = authTokenTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func authTokenBeforeInsertHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenAfterInsertHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenAfterSelectHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenBeforeUpdateHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenAfterUpdateHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenBeforeDeleteHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenAfterDeleteHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenBeforeUpsertHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func authTokenAfterUpsertHook(e boil.Executor, o *AuthToken) error {
	*o = AuthToken{}
	return nil
}

func testAuthTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &AuthToken{}
	o := &AuthToken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthToken object: %s", err)
	}

	AddAuthTokenHook(boil.BeforeInsertHook, authTokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authTokenBeforeInsertHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.AfterInsertHook, authTokenAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authTokenAfterInsertHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.AfterSelectHook, authTokenAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authTokenAfterSelectHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.BeforeUpdateHook, authTokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authTokenBeforeUpdateHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.AfterUpdateHook, authTokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authTokenAfterUpdateHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.BeforeDeleteHook, authTokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authTokenBeforeDeleteHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.AfterDeleteHook, authTokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authTokenAfterDeleteHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.BeforeUpsertHook, authTokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authTokenBeforeUpsertHooks = []AuthTokenHook{}

	AddAuthTokenHook(boil.AfterUpsertHook, authTokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authTokenAfterUpsertHooks = []AuthTokenHook{}
}
func testAuthTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx, authTokenColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthTokenToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local AuthToken
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	local.UserID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthTokenSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*AuthToken)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAuthTokenToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AuthToken
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authTokenDBTypes, false, strmangle.SetComplement(authTokenPrimaryKeyColumns, authTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthTokens[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID.Int != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID.Int))
		reflect.Indirect(reflect.ValueOf(&a.UserID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID.Int != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int, x.ID)
		}
	}
}

func testAuthTokenToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AuthToken
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authTokenDBTypes, false, strmangle.SetComplement(authTokenPrimaryKeyColumns, authTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if a.UserID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthTokens) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAuthTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = authToken.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAuthTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AuthTokenSlice{authToken}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAuthTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := AuthTokens(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authTokenDBTypes = map[string]string{`Token`: `character varying`, `UserID`: `integer`}
	_                = bytes.MinRead
)

func testAuthTokensUpdate(t *testing.T) {
	t.Parallel()

	if len(authTokenColumns) == len(authTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	if err = authToken.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAuthTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authTokenColumns) == len(authTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	authToken := &AuthToken{}
	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, authToken, authTokenDBTypes, true, authTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authTokenColumns, authTokenPrimaryKeyColumns) {
		fields = authTokenColumns
	} else {
		fields = strmangle.SetComplement(
			authTokenColumns,
			authTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(authToken))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AuthTokenSlice{authToken}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAuthTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(authTokenColumns) == len(authTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	authToken := AuthToken{}
	if err = randomize.Struct(seed, &authToken, authTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authToken.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert AuthToken: %s", err)
	}

	count, err := AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &authToken, authTokenDBTypes, false, authTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthToken struct: %s", err)
	}

	if err = authToken.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert AuthToken: %s", err)
	}

	count, err = AuthTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
