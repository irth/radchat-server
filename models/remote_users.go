// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// RemoteUser is an object representing the database table.
type RemoteUser struct {
	RemoteID string   `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	UserID   null.Int `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *remoteUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L remoteUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RemoteUserColumns = struct {
	RemoteID string
	UserID   string
}{
	RemoteID: "remote_id",
	UserID:   "user_id",
}

// remoteUserR is where relationships are stored.
type remoteUserR struct {
	User *User
}

// remoteUserL is where Load methods for each relationship are stored.
type remoteUserL struct{}

var (
	remoteUserColumns               = []string{"remote_id", "user_id"}
	remoteUserColumnsWithoutDefault = []string{"remote_id", "user_id"}
	remoteUserColumnsWithDefault    = []string{}
	remoteUserPrimaryKeyColumns     = []string{"remote_id"}
)

type (
	// RemoteUserSlice is an alias for a slice of pointers to RemoteUser.
	// This should generally be used opposed to []RemoteUser.
	RemoteUserSlice []*RemoteUser
	// RemoteUserHook is the signature for custom RemoteUser hook methods
	RemoteUserHook func(boil.Executor, *RemoteUser) error

	remoteUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	remoteUserType                 = reflect.TypeOf(&RemoteUser{})
	remoteUserMapping              = queries.MakeStructMapping(remoteUserType)
	remoteUserPrimaryKeyMapping, _ = queries.BindMapping(remoteUserType, remoteUserMapping, remoteUserPrimaryKeyColumns)
	remoteUserInsertCacheMut       sync.RWMutex
	remoteUserInsertCache          = make(map[string]insertCache)
	remoteUserUpdateCacheMut       sync.RWMutex
	remoteUserUpdateCache          = make(map[string]updateCache)
	remoteUserUpsertCacheMut       sync.RWMutex
	remoteUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var remoteUserBeforeInsertHooks []RemoteUserHook
var remoteUserBeforeUpdateHooks []RemoteUserHook
var remoteUserBeforeDeleteHooks []RemoteUserHook
var remoteUserBeforeUpsertHooks []RemoteUserHook

var remoteUserAfterInsertHooks []RemoteUserHook
var remoteUserAfterSelectHooks []RemoteUserHook
var remoteUserAfterUpdateHooks []RemoteUserHook
var remoteUserAfterDeleteHooks []RemoteUserHook
var remoteUserAfterUpsertHooks []RemoteUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RemoteUser) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RemoteUser) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RemoteUser) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RemoteUser) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RemoteUser) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RemoteUser) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RemoteUser) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RemoteUser) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RemoteUser) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range remoteUserAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRemoteUserHook registers your hook function for all future operations.
func AddRemoteUserHook(hookPoint boil.HookPoint, remoteUserHook RemoteUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		remoteUserBeforeInsertHooks = append(remoteUserBeforeInsertHooks, remoteUserHook)
	case boil.BeforeUpdateHook:
		remoteUserBeforeUpdateHooks = append(remoteUserBeforeUpdateHooks, remoteUserHook)
	case boil.BeforeDeleteHook:
		remoteUserBeforeDeleteHooks = append(remoteUserBeforeDeleteHooks, remoteUserHook)
	case boil.BeforeUpsertHook:
		remoteUserBeforeUpsertHooks = append(remoteUserBeforeUpsertHooks, remoteUserHook)
	case boil.AfterInsertHook:
		remoteUserAfterInsertHooks = append(remoteUserAfterInsertHooks, remoteUserHook)
	case boil.AfterSelectHook:
		remoteUserAfterSelectHooks = append(remoteUserAfterSelectHooks, remoteUserHook)
	case boil.AfterUpdateHook:
		remoteUserAfterUpdateHooks = append(remoteUserAfterUpdateHooks, remoteUserHook)
	case boil.AfterDeleteHook:
		remoteUserAfterDeleteHooks = append(remoteUserAfterDeleteHooks, remoteUserHook)
	case boil.AfterUpsertHook:
		remoteUserAfterUpsertHooks = append(remoteUserAfterUpsertHooks, remoteUserHook)
	}
}

// OneP returns a single remoteUser record from the query, and panics on error.
func (q remoteUserQuery) OneP() *RemoteUser {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single remoteUser record from the query.
func (q remoteUserQuery) One() (*RemoteUser, error) {
	o := &RemoteUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for remote_users")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all RemoteUser records from the query, and panics on error.
func (q remoteUserQuery) AllP() RemoteUserSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RemoteUser records from the query.
func (q remoteUserQuery) All() (RemoteUserSlice, error) {
	var o []*RemoteUser

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RemoteUser slice")
	}

	if len(remoteUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all RemoteUser records in the query, and panics on error.
func (q remoteUserQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RemoteUser records in the query.
func (q remoteUserQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count remote_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q remoteUserQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q remoteUserQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if remote_users exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *RemoteUser) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *RemoteUser) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (remoteUserL) LoadUser(e boil.Executor, singular bool, maybeRemoteUser interface{}) error {
	var slice []*RemoteUser
	var object *RemoteUser

	count := 1
	if singular {
		object = maybeRemoteUser.(*RemoteUser)
	} else {
		slice = *maybeRemoteUser.(*[]*RemoteUser)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &remoteUserR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &remoteUserR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"users\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(remoteUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID.Int == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the remote_user to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RemoteUsers.
// Uses the global database handle.
func (o *RemoteUser) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the remote_user to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RemoteUsers.
// Panics on error.
func (o *RemoteUser) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the remote_user to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RemoteUsers.
// Uses the global database handle and panics on error.
func (o *RemoteUser) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the remote_user to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RemoteUsers.
func (o *RemoteUser) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"remote_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, remoteUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RemoteID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID.Int = related.ID
	o.UserID.Valid = true

	if o.R == nil {
		o.R = &remoteUserR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			RemoteUsers: RemoteUserSlice{o},
		}
	} else {
		related.R.RemoteUsers = append(related.R.RemoteUsers, o)
	}

	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RemoteUser) RemoveUserG(related *User) error {
	return o.RemoveUser(boil.GetDB(), related)
}

// RemoveUserP relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *RemoteUser) RemoveUserP(exec boil.Executor, related *User) {
	if err := o.RemoveUser(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUserGP relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *RemoteUser) RemoveUserGP(related *User) {
	if err := o.RemoveUser(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RemoteUser) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	o.UserID.Valid = false
	if err = o.Update(exec, "user_id"); err != nil {
		o.UserID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RemoteUsers {
		if o.UserID.Int != ri.UserID.Int {
			continue
		}

		ln := len(related.R.RemoteUsers)
		if ln > 1 && i < ln-1 {
			related.R.RemoteUsers[i] = related.R.RemoteUsers[ln-1]
		}
		related.R.RemoteUsers = related.R.RemoteUsers[:ln-1]
		break
	}
	return nil
}

// RemoteUsersG retrieves all records.
func RemoteUsersG(mods ...qm.QueryMod) remoteUserQuery {
	return RemoteUsers(boil.GetDB(), mods...)
}

// RemoteUsers retrieves all the records using an executor.
func RemoteUsers(exec boil.Executor, mods ...qm.QueryMod) remoteUserQuery {
	mods = append(mods, qm.From("\"remote_users\""))
	return remoteUserQuery{NewQuery(exec, mods...)}
}

// FindRemoteUserG retrieves a single record by ID.
func FindRemoteUserG(remoteID string, selectCols ...string) (*RemoteUser, error) {
	return FindRemoteUser(boil.GetDB(), remoteID, selectCols...)
}

// FindRemoteUserGP retrieves a single record by ID, and panics on error.
func FindRemoteUserGP(remoteID string, selectCols ...string) *RemoteUser {
	retobj, err := FindRemoteUser(boil.GetDB(), remoteID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRemoteUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRemoteUser(exec boil.Executor, remoteID string, selectCols ...string) (*RemoteUser, error) {
	remoteUserObj := &RemoteUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"remote_users\" where \"remote_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, remoteID)

	err := q.Bind(remoteUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from remote_users")
	}

	return remoteUserObj, nil
}

// FindRemoteUserP retrieves a single record by ID with an executor, and panics on error.
func FindRemoteUserP(exec boil.Executor, remoteID string, selectCols ...string) *RemoteUser {
	retobj, err := FindRemoteUser(exec, remoteID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RemoteUser) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *RemoteUser) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RemoteUser) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *RemoteUser) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no remote_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(remoteUserColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	remoteUserInsertCacheMut.RLock()
	cache, cached := remoteUserInsertCache[key]
	remoteUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			remoteUserColumns,
			remoteUserColumnsWithDefault,
			remoteUserColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(remoteUserType, remoteUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(remoteUserType, remoteUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"remote_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"remote_users\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into remote_users")
	}

	if !cached {
		remoteUserInsertCacheMut.Lock()
		remoteUserInsertCache[key] = cache
		remoteUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single RemoteUser record. See Update for
// whitelist behavior description.
func (o *RemoteUser) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single RemoteUser record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *RemoteUser) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the RemoteUser, and panics on error.
// See Update for whitelist behavior description.
func (o *RemoteUser) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the RemoteUser.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *RemoteUser) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	remoteUserUpdateCacheMut.RLock()
	cache, cached := remoteUserUpdateCache[key]
	remoteUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			remoteUserColumns,
			remoteUserPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update remote_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"remote_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, remoteUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(remoteUserType, remoteUserMapping, append(wl, remoteUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update remote_users row")
	}

	if !cached {
		remoteUserUpdateCacheMut.Lock()
		remoteUserUpdateCache[key] = cache
		remoteUserUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q remoteUserQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q remoteUserQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for remote_users")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RemoteUserSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RemoteUserSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RemoteUserSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RemoteUserSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), remoteUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"remote_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, remoteUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in remoteUser slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RemoteUser) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *RemoteUser) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RemoteUser) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *RemoteUser) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no remote_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(remoteUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	remoteUserUpsertCacheMut.RLock()
	cache, cached := remoteUserUpsertCache[key]
	remoteUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			remoteUserColumns,
			remoteUserColumnsWithDefault,
			remoteUserColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			remoteUserColumns,
			remoteUserPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert remote_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(remoteUserPrimaryKeyColumns))
			copy(conflict, remoteUserPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"remote_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(remoteUserType, remoteUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(remoteUserType, remoteUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert remote_users")
	}

	if !cached {
		remoteUserUpsertCacheMut.Lock()
		remoteUserUpsertCache[key] = cache
		remoteUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single RemoteUser record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RemoteUser) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single RemoteUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RemoteUser) DeleteG() error {
	if o == nil {
		return errors.New("models: no RemoteUser provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single RemoteUser record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RemoteUser) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single RemoteUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RemoteUser) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RemoteUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), remoteUserPrimaryKeyMapping)
	sql := "DELETE FROM \"remote_users\" WHERE \"remote_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from remote_users")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q remoteUserQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q remoteUserQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no remoteUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from remote_users")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RemoteUserSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RemoteUserSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no RemoteUser slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RemoteUserSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RemoteUserSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no RemoteUser slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(remoteUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), remoteUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"remote_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, remoteUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from remoteUser slice")
	}

	if len(remoteUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *RemoteUser) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RemoteUser) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RemoteUser) ReloadG() error {
	if o == nil {
		return errors.New("models: no RemoteUser provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RemoteUser) Reload(exec boil.Executor) error {
	ret, err := FindRemoteUser(exec, o.RemoteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RemoteUserSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RemoteUserSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RemoteUserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RemoteUserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RemoteUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	remoteUsers := RemoteUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), remoteUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"remote_users\".* FROM \"remote_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, remoteUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&remoteUsers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RemoteUserSlice")
	}

	*o = remoteUsers

	return nil
}

// RemoteUserExists checks if the RemoteUser row exists.
func RemoteUserExists(exec boil.Executor, remoteID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"remote_users\" where \"remote_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, remoteID)
	}

	row := exec.QueryRow(sql, remoteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if remote_users exists")
	}

	return exists, nil
}

// RemoteUserExistsG checks if the RemoteUser row exists.
func RemoteUserExistsG(remoteID string) (bool, error) {
	return RemoteUserExists(boil.GetDB(), remoteID)
}

// RemoteUserExistsGP checks if the RemoteUser row exists. Panics on error.
func RemoteUserExistsGP(remoteID string) bool {
	e, err := RemoteUserExists(boil.GetDB(), remoteID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RemoteUserExistsP checks if the RemoteUser row exists. Panics on error.
func RemoteUserExistsP(exec boil.Executor, remoteID string) bool {
	e, err := RemoteUserExists(exec, remoteID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
