// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testFriendships(t *testing.T) {
	t.Parallel()

	query := Friendships(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFriendshipsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = friendship.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendshipsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Friendships(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendshipsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FriendshipSlice{friendship}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFriendshipsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FriendshipExists(tx, friendship.ID)
	if err != nil {
		t.Errorf("Unable to check if Friendship exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FriendshipExistsG to return true, but got false.")
	}
}
func testFriendshipsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	friendshipFound, err := FindFriendship(tx, friendship.ID)
	if err != nil {
		t.Error(err)
	}

	if friendshipFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFriendshipsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Friendships(tx).Bind(friendship); err != nil {
		t.Error(err)
	}
}

func testFriendshipsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Friendships(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFriendshipsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendshipOne := &Friendship{}
	friendshipTwo := &Friendship{}
	if err = randomize.Struct(seed, friendshipOne, friendshipDBTypes, false, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}
	if err = randomize.Struct(seed, friendshipTwo, friendshipDBTypes, false, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendshipOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = friendshipTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Friendships(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFriendshipsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	friendshipOne := &Friendship{}
	friendshipTwo := &Friendship{}
	if err = randomize.Struct(seed, friendshipOne, friendshipDBTypes, false, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}
	if err = randomize.Struct(seed, friendshipTwo, friendshipDBTypes, false, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendshipOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = friendshipTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func friendshipBeforeInsertHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipAfterInsertHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipAfterSelectHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipBeforeUpdateHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipAfterUpdateHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipBeforeDeleteHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipAfterDeleteHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipBeforeUpsertHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func friendshipAfterUpsertHook(e boil.Executor, o *Friendship) error {
	*o = Friendship{}
	return nil
}

func testFriendshipsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Friendship{}
	o := &Friendship{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, friendshipDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Friendship object: %s", err)
	}

	AddFriendshipHook(boil.BeforeInsertHook, friendshipBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	friendshipBeforeInsertHooks = []FriendshipHook{}

	AddFriendshipHook(boil.AfterInsertHook, friendshipAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	friendshipAfterInsertHooks = []FriendshipHook{}

	AddFriendshipHook(boil.AfterSelectHook, friendshipAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	friendshipAfterSelectHooks = []FriendshipHook{}

	AddFriendshipHook(boil.BeforeUpdateHook, friendshipBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	friendshipBeforeUpdateHooks = []FriendshipHook{}

	AddFriendshipHook(boil.AfterUpdateHook, friendshipAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	friendshipAfterUpdateHooks = []FriendshipHook{}

	AddFriendshipHook(boil.BeforeDeleteHook, friendshipBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	friendshipBeforeDeleteHooks = []FriendshipHook{}

	AddFriendshipHook(boil.AfterDeleteHook, friendshipAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	friendshipAfterDeleteHooks = []FriendshipHook{}

	AddFriendshipHook(boil.BeforeUpsertHook, friendshipBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	friendshipBeforeUpsertHooks = []FriendshipHook{}

	AddFriendshipHook(boil.AfterUpsertHook, friendshipAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	friendshipAfterUpsertHooks = []FriendshipHook{}
}
func testFriendshipsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFriendshipsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx, friendshipColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFriendshipToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Friendship
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	local.UserID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FriendshipSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Friendship)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFriendshipToOneUserUsingFriend(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Friendship
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	local.FriendID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.FriendID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Friend(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FriendshipSlice{&local}
	if err = local.L.LoadFriend(tx, false, (*[]*Friendship)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Friend == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Friend = nil
	if err = local.L.LoadFriend(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Friend == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFriendshipToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Friendship
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendshipDBTypes, false, strmangle.SetComplement(friendshipPrimaryKeyColumns, friendshipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Friendships[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID.Int != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID.Int))
		reflect.Indirect(reflect.ValueOf(&a.UserID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID.Int != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int, x.ID)
		}
	}
}

func testFriendshipToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Friendship
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendshipDBTypes, false, strmangle.SetComplement(friendshipPrimaryKeyColumns, friendshipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if a.UserID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Friendships) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testFriendshipToOneSetOpUserUsingFriend(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Friendship
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendshipDBTypes, false, strmangle.SetComplement(friendshipPrimaryKeyColumns, friendshipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetFriend(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Friend != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FriendFriendships[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FriendID.Int != x.ID {
			t.Error("foreign key was wrong value", a.FriendID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FriendID.Int))
		reflect.Indirect(reflect.ValueOf(&a.FriendID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FriendID.Int != x.ID {
			t.Error("foreign key was wrong value", a.FriendID.Int, x.ID)
		}
	}
}

func testFriendshipToOneRemoveOpUserUsingFriend(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Friendship
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendshipDBTypes, false, strmangle.SetComplement(friendshipPrimaryKeyColumns, friendshipColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFriend(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFriend(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Friend(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Friend != nil {
		t.Error("R struct entry should be nil")
	}

	if a.FriendID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FriendFriendships) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testFriendshipsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = friendship.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFriendshipsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FriendshipSlice{friendship}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFriendshipsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Friendships(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	friendshipDBTypes = map[string]string{`FriendID`: `integer`, `ID`: `integer`, `UserID`: `integer`}
	_                 = bytes.MinRead
)

func testFriendshipsUpdate(t *testing.T) {
	t.Parallel()

	if len(friendshipColumns) == len(friendshipPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	if err = friendship.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFriendshipsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(friendshipColumns) == len(friendshipPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	friendship := &Friendship{}
	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, friendship, friendshipDBTypes, true, friendshipPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(friendshipColumns, friendshipPrimaryKeyColumns) {
		fields = friendshipColumns
	} else {
		fields = strmangle.SetComplement(
			friendshipColumns,
			friendshipPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(friendship))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FriendshipSlice{friendship}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFriendshipsUpsert(t *testing.T) {
	t.Parallel()

	if len(friendshipColumns) == len(friendshipPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	friendship := Friendship{}
	if err = randomize.Struct(seed, &friendship, friendshipDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = friendship.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Friendship: %s", err)
	}

	count, err := Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &friendship, friendshipDBTypes, false, friendshipPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Friendship struct: %s", err)
	}

	if err = friendship.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Friendship: %s", err)
	}

	count, err = Friendships(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
