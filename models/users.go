// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID          int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DisplayName string `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID          string
	DisplayName string
}{
	ID:          "id",
	DisplayName: "display_name",
}

// userR is where relationships are stored.
type userR struct {
	AuthTokens        AuthTokenSlice
	Friendships       FriendshipSlice
	FriendFriendships FriendshipSlice
	RemoteUsers       RemoteUserSlice
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userColumns               = []string{"id", "display_name"}
	userColumnsWithoutDefault = []string{"display_name"}
	userColumnsWithDefault    = []string{"id"}
	userPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should generally be used opposed to []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(boil.Executor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userBeforeInsertHooks []UserHook
var userBeforeUpdateHooks []UserHook
var userBeforeDeleteHooks []UserHook
var userBeforeUpsertHooks []UserHook

var userAfterInsertHooks []UserHook
var userAfterSelectHooks []UserHook
var userAfterUpdateHooks []UserHook
var userAfterDeleteHooks []UserHook
var userAfterUpsertHooks []UserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
	case boil.BeforeUpdateHook:
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
	case boil.BeforeDeleteHook:
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
	case boil.BeforeUpsertHook:
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
	case boil.AfterInsertHook:
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
	case boil.AfterSelectHook:
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
	case boil.AfterUpdateHook:
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
	case boil.AfterDeleteHook:
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
	case boil.AfterUpsertHook:
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
	}
}

// OneP returns a single user record from the query, and panics on error.
func (q userQuery) OneP() *User {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single user record from the query.
func (q userQuery) One() (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all User records from the query, and panics on error.
func (q userQuery) AllP() UserSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all User records from the query.
func (q userQuery) All() (UserSlice, error) {
	var o []*User

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all User records in the query, and panics on error.
func (q userQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all User records in the query.
func (q userQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users exists")
	}

	return count > 0, nil
}

// AuthTokensG retrieves all the auth_token's auth tokens.
func (o *User) AuthTokensG(mods ...qm.QueryMod) authTokenQuery {
	return o.AuthTokens(boil.GetDB(), mods...)
}

// AuthTokens retrieves all the auth_token's auth tokens with an executor.
func (o *User) AuthTokens(exec boil.Executor, mods ...qm.QueryMod) authTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_tokens\".\"user_id\"=?", o.ID),
	)

	query := AuthTokens(exec, queryMods...)
	queries.SetFrom(query.Query, "\"auth_tokens\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auth_tokens\".*"})
	}

	return query
}

// FriendshipsG retrieves all the friendship's friendships.
func (o *User) FriendshipsG(mods ...qm.QueryMod) friendshipQuery {
	return o.Friendships(boil.GetDB(), mods...)
}

// Friendships retrieves all the friendship's friendships with an executor.
func (o *User) Friendships(exec boil.Executor, mods ...qm.QueryMod) friendshipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"friendships\".\"user_id\"=?", o.ID),
	)

	query := Friendships(exec, queryMods...)
	queries.SetFrom(query.Query, "\"friendships\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"friendships\".*"})
	}

	return query
}

// FriendFriendshipsG retrieves all the friendship's friendships via friend_id column.
func (o *User) FriendFriendshipsG(mods ...qm.QueryMod) friendshipQuery {
	return o.FriendFriendships(boil.GetDB(), mods...)
}

// FriendFriendships retrieves all the friendship's friendships with an executor via friend_id column.
func (o *User) FriendFriendships(exec boil.Executor, mods ...qm.QueryMod) friendshipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"friendships\".\"friend_id\"=?", o.ID),
	)

	query := Friendships(exec, queryMods...)
	queries.SetFrom(query.Query, "\"friendships\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"friendships\".*"})
	}

	return query
}

// RemoteUsersG retrieves all the remote_user's remote users.
func (o *User) RemoteUsersG(mods ...qm.QueryMod) remoteUserQuery {
	return o.RemoteUsers(boil.GetDB(), mods...)
}

// RemoteUsers retrieves all the remote_user's remote users with an executor.
func (o *User) RemoteUsers(exec boil.Executor, mods ...qm.QueryMod) remoteUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"remote_users\".\"user_id\"=?", o.ID),
	)

	query := RemoteUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"remote_users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"remote_users\".*"})
	}

	return query
}

// LoadAuthTokens allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userL) LoadAuthTokens(e boil.Executor, singular bool, maybeUser interface{}) error {
	var slice []*User
	var object *User

	count := 1
	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"auth_tokens\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_tokens")
	}
	defer results.Close()

	var resultSlice []*AuthToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_tokens")
	}

	if len(authTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthTokens = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID.Int {
				local.R.AuthTokens = append(local.R.AuthTokens, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFriendships allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userL) LoadFriendships(e boil.Executor, singular bool, maybeUser interface{}) error {
	var slice []*User
	var object *User

	count := 1
	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"friendships\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friendships")
	}
	defer results.Close()

	var resultSlice []*Friendship
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friendships")
	}

	if len(friendshipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Friendships = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID.Int {
				local.R.Friendships = append(local.R.Friendships, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFriendFriendships allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userL) LoadFriendFriendships(e boil.Executor, singular bool, maybeUser interface{}) error {
	var slice []*User
	var object *User

	count := 1
	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"friendships\" where \"friend_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friendships")
	}
	defer results.Close()

	var resultSlice []*Friendship
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friendships")
	}

	if len(friendshipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FriendFriendships = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FriendID.Int {
				local.R.FriendFriendships = append(local.R.FriendFriendships, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRemoteUsers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userL) LoadRemoteUsers(e boil.Executor, singular bool, maybeUser interface{}) error {
	var slice []*User
	var object *User

	count := 1
	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"remote_users\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load remote_users")
	}
	defer results.Close()

	var resultSlice []*RemoteUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice remote_users")
	}

	if len(remoteUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RemoteUsers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID.Int {
				local.R.RemoteUsers = append(local.R.RemoteUsers, foreign)
				break
			}
		}
	}

	return nil
}

// AddAuthTokensG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AuthTokens.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *User) AddAuthTokensG(insert bool, related ...*AuthToken) error {
	return o.AddAuthTokens(boil.GetDB(), insert, related...)
}

// AddAuthTokensP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AuthTokens.
// Sets related.R.User appropriately.
// Panics on error.
func (o *User) AddAuthTokensP(exec boil.Executor, insert bool, related ...*AuthToken) {
	if err := o.AddAuthTokens(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAuthTokensGP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AuthTokens.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *User) AddAuthTokensGP(insert bool, related ...*AuthToken) {
	if err := o.AddAuthTokens(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAuthTokens adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AuthTokens.
// Sets related.R.User appropriately.
func (o *User) AddAuthTokens(exec boil.Executor, insert bool, related ...*AuthToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_tokens\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, authTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &userR{
			AuthTokens: related,
		}
	} else {
		o.R.AuthTokens = append(o.R.AuthTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authTokenR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetAuthTokensG removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's AuthTokens accordingly.
// Replaces o.R.AuthTokens with related.
// Sets related.R.User's AuthTokens accordingly.
// Uses the global database handle.
func (o *User) SetAuthTokensG(insert bool, related ...*AuthToken) error {
	return o.SetAuthTokens(boil.GetDB(), insert, related...)
}

// SetAuthTokensP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's AuthTokens accordingly.
// Replaces o.R.AuthTokens with related.
// Sets related.R.User's AuthTokens accordingly.
// Panics on error.
func (o *User) SetAuthTokensP(exec boil.Executor, insert bool, related ...*AuthToken) {
	if err := o.SetAuthTokens(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAuthTokensGP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's AuthTokens accordingly.
// Replaces o.R.AuthTokens with related.
// Sets related.R.User's AuthTokens accordingly.
// Uses the global database handle and panics on error.
func (o *User) SetAuthTokensGP(insert bool, related ...*AuthToken) {
	if err := o.SetAuthTokens(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAuthTokens removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's AuthTokens accordingly.
// Replaces o.R.AuthTokens with related.
// Sets related.R.User's AuthTokens accordingly.
func (o *User) SetAuthTokens(exec boil.Executor, insert bool, related ...*AuthToken) error {
	query := "update \"auth_tokens\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AuthTokens {
			rel.UserID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}

		o.R.AuthTokens = nil
	}
	return o.AddAuthTokens(exec, insert, related...)
}

// RemoveAuthTokensG relationships from objects passed in.
// Removes related items from R.AuthTokens (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle.
func (o *User) RemoveAuthTokensG(related ...*AuthToken) error {
	return o.RemoveAuthTokens(boil.GetDB(), related...)
}

// RemoveAuthTokensP relationships from objects passed in.
// Removes related items from R.AuthTokens (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Panics on error.
func (o *User) RemoveAuthTokensP(exec boil.Executor, related ...*AuthToken) {
	if err := o.RemoveAuthTokens(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAuthTokensGP relationships from objects passed in.
// Removes related items from R.AuthTokens (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle and panics on error.
func (o *User) RemoveAuthTokensGP(related ...*AuthToken) {
	if err := o.RemoveAuthTokens(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAuthTokens relationships from objects passed in.
// Removes related items from R.AuthTokens (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *User) RemoveAuthTokens(exec boil.Executor, related ...*AuthToken) error {
	var err error
	for _, rel := range related {
		rel.UserID.Valid = false
		if rel.R != nil {
			rel.R.User = nil
		}
		if err = rel.Update(exec, "user_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AuthTokens {
			if rel != ri {
				continue
			}

			ln := len(o.R.AuthTokens)
			if ln > 1 && i < ln-1 {
				o.R.AuthTokens[i] = o.R.AuthTokens[ln-1]
			}
			o.R.AuthTokens = o.R.AuthTokens[:ln-1]
			break
		}
	}

	return nil
}

// AddFriendshipsG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Friendships.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *User) AddFriendshipsG(insert bool, related ...*Friendship) error {
	return o.AddFriendships(boil.GetDB(), insert, related...)
}

// AddFriendshipsP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Friendships.
// Sets related.R.User appropriately.
// Panics on error.
func (o *User) AddFriendshipsP(exec boil.Executor, insert bool, related ...*Friendship) {
	if err := o.AddFriendships(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFriendshipsGP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Friendships.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *User) AddFriendshipsGP(insert bool, related ...*Friendship) {
	if err := o.AddFriendships(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFriendships adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Friendships.
// Sets related.R.User appropriately.
func (o *User) AddFriendships(exec boil.Executor, insert bool, related ...*Friendship) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"friendships\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, friendshipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &userR{
			Friendships: related,
		}
	} else {
		o.R.Friendships = append(o.R.Friendships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendshipR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetFriendshipsG removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's Friendships accordingly.
// Replaces o.R.Friendships with related.
// Sets related.R.User's Friendships accordingly.
// Uses the global database handle.
func (o *User) SetFriendshipsG(insert bool, related ...*Friendship) error {
	return o.SetFriendships(boil.GetDB(), insert, related...)
}

// SetFriendshipsP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's Friendships accordingly.
// Replaces o.R.Friendships with related.
// Sets related.R.User's Friendships accordingly.
// Panics on error.
func (o *User) SetFriendshipsP(exec boil.Executor, insert bool, related ...*Friendship) {
	if err := o.SetFriendships(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFriendshipsGP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's Friendships accordingly.
// Replaces o.R.Friendships with related.
// Sets related.R.User's Friendships accordingly.
// Uses the global database handle and panics on error.
func (o *User) SetFriendshipsGP(insert bool, related ...*Friendship) {
	if err := o.SetFriendships(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFriendships removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's Friendships accordingly.
// Replaces o.R.Friendships with related.
// Sets related.R.User's Friendships accordingly.
func (o *User) SetFriendships(exec boil.Executor, insert bool, related ...*Friendship) error {
	query := "update \"friendships\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Friendships {
			rel.UserID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}

		o.R.Friendships = nil
	}
	return o.AddFriendships(exec, insert, related...)
}

// RemoveFriendshipsG relationships from objects passed in.
// Removes related items from R.Friendships (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle.
func (o *User) RemoveFriendshipsG(related ...*Friendship) error {
	return o.RemoveFriendships(boil.GetDB(), related...)
}

// RemoveFriendshipsP relationships from objects passed in.
// Removes related items from R.Friendships (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Panics on error.
func (o *User) RemoveFriendshipsP(exec boil.Executor, related ...*Friendship) {
	if err := o.RemoveFriendships(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveFriendshipsGP relationships from objects passed in.
// Removes related items from R.Friendships (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle and panics on error.
func (o *User) RemoveFriendshipsGP(related ...*Friendship) {
	if err := o.RemoveFriendships(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveFriendships relationships from objects passed in.
// Removes related items from R.Friendships (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *User) RemoveFriendships(exec boil.Executor, related ...*Friendship) error {
	var err error
	for _, rel := range related {
		rel.UserID.Valid = false
		if rel.R != nil {
			rel.R.User = nil
		}
		if err = rel.Update(exec, "user_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Friendships {
			if rel != ri {
				continue
			}

			ln := len(o.R.Friendships)
			if ln > 1 && i < ln-1 {
				o.R.Friendships[i] = o.R.Friendships[ln-1]
			}
			o.R.Friendships = o.R.Friendships[:ln-1]
			break
		}
	}

	return nil
}

// AddFriendFriendshipsG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FriendFriendships.
// Sets related.R.Friend appropriately.
// Uses the global database handle.
func (o *User) AddFriendFriendshipsG(insert bool, related ...*Friendship) error {
	return o.AddFriendFriendships(boil.GetDB(), insert, related...)
}

// AddFriendFriendshipsP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FriendFriendships.
// Sets related.R.Friend appropriately.
// Panics on error.
func (o *User) AddFriendFriendshipsP(exec boil.Executor, insert bool, related ...*Friendship) {
	if err := o.AddFriendFriendships(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFriendFriendshipsGP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FriendFriendships.
// Sets related.R.Friend appropriately.
// Uses the global database handle and panics on error.
func (o *User) AddFriendFriendshipsGP(insert bool, related ...*Friendship) {
	if err := o.AddFriendFriendships(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFriendFriendships adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FriendFriendships.
// Sets related.R.Friend appropriately.
func (o *User) AddFriendFriendships(exec boil.Executor, insert bool, related ...*Friendship) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FriendID.Int = o.ID
			rel.FriendID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"friendships\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"friend_id"}),
				strmangle.WhereClause("\"", "\"", 2, friendshipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FriendID.Int = o.ID
			rel.FriendID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &userR{
			FriendFriendships: related,
		}
	} else {
		o.R.FriendFriendships = append(o.R.FriendFriendships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendshipR{
				Friend: o,
			}
		} else {
			rel.R.Friend = o
		}
	}
	return nil
}

// SetFriendFriendshipsG removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Friend's FriendFriendships accordingly.
// Replaces o.R.FriendFriendships with related.
// Sets related.R.Friend's FriendFriendships accordingly.
// Uses the global database handle.
func (o *User) SetFriendFriendshipsG(insert bool, related ...*Friendship) error {
	return o.SetFriendFriendships(boil.GetDB(), insert, related...)
}

// SetFriendFriendshipsP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Friend's FriendFriendships accordingly.
// Replaces o.R.FriendFriendships with related.
// Sets related.R.Friend's FriendFriendships accordingly.
// Panics on error.
func (o *User) SetFriendFriendshipsP(exec boil.Executor, insert bool, related ...*Friendship) {
	if err := o.SetFriendFriendships(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFriendFriendshipsGP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Friend's FriendFriendships accordingly.
// Replaces o.R.FriendFriendships with related.
// Sets related.R.Friend's FriendFriendships accordingly.
// Uses the global database handle and panics on error.
func (o *User) SetFriendFriendshipsGP(insert bool, related ...*Friendship) {
	if err := o.SetFriendFriendships(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFriendFriendships removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Friend's FriendFriendships accordingly.
// Replaces o.R.FriendFriendships with related.
// Sets related.R.Friend's FriendFriendships accordingly.
func (o *User) SetFriendFriendships(exec boil.Executor, insert bool, related ...*Friendship) error {
	query := "update \"friendships\" set \"friend_id\" = null where \"friend_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FriendFriendships {
			rel.FriendID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Friend = nil
		}

		o.R.FriendFriendships = nil
	}
	return o.AddFriendFriendships(exec, insert, related...)
}

// RemoveFriendFriendshipsG relationships from objects passed in.
// Removes related items from R.FriendFriendships (uses pointer comparison, removal does not keep order)
// Sets related.R.Friend.
// Uses the global database handle.
func (o *User) RemoveFriendFriendshipsG(related ...*Friendship) error {
	return o.RemoveFriendFriendships(boil.GetDB(), related...)
}

// RemoveFriendFriendshipsP relationships from objects passed in.
// Removes related items from R.FriendFriendships (uses pointer comparison, removal does not keep order)
// Sets related.R.Friend.
// Panics on error.
func (o *User) RemoveFriendFriendshipsP(exec boil.Executor, related ...*Friendship) {
	if err := o.RemoveFriendFriendships(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveFriendFriendshipsGP relationships from objects passed in.
// Removes related items from R.FriendFriendships (uses pointer comparison, removal does not keep order)
// Sets related.R.Friend.
// Uses the global database handle and panics on error.
func (o *User) RemoveFriendFriendshipsGP(related ...*Friendship) {
	if err := o.RemoveFriendFriendships(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveFriendFriendships relationships from objects passed in.
// Removes related items from R.FriendFriendships (uses pointer comparison, removal does not keep order)
// Sets related.R.Friend.
func (o *User) RemoveFriendFriendships(exec boil.Executor, related ...*Friendship) error {
	var err error
	for _, rel := range related {
		rel.FriendID.Valid = false
		if rel.R != nil {
			rel.R.Friend = nil
		}
		if err = rel.Update(exec, "friend_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FriendFriendships {
			if rel != ri {
				continue
			}

			ln := len(o.R.FriendFriendships)
			if ln > 1 && i < ln-1 {
				o.R.FriendFriendships[i] = o.R.FriendFriendships[ln-1]
			}
			o.R.FriendFriendships = o.R.FriendFriendships[:ln-1]
			break
		}
	}

	return nil
}

// AddRemoteUsersG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.RemoteUsers.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *User) AddRemoteUsersG(insert bool, related ...*RemoteUser) error {
	return o.AddRemoteUsers(boil.GetDB(), insert, related...)
}

// AddRemoteUsersP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.RemoteUsers.
// Sets related.R.User appropriately.
// Panics on error.
func (o *User) AddRemoteUsersP(exec boil.Executor, insert bool, related ...*RemoteUser) {
	if err := o.AddRemoteUsers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRemoteUsersGP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.RemoteUsers.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *User) AddRemoteUsersGP(insert bool, related ...*RemoteUser) {
	if err := o.AddRemoteUsers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRemoteUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.RemoteUsers.
// Sets related.R.User appropriately.
func (o *User) AddRemoteUsers(exec boil.Executor, insert bool, related ...*RemoteUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"remote_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, remoteUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.RemoteID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &userR{
			RemoteUsers: related,
		}
	} else {
		o.R.RemoteUsers = append(o.R.RemoteUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &remoteUserR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetRemoteUsersG removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's RemoteUsers accordingly.
// Replaces o.R.RemoteUsers with related.
// Sets related.R.User's RemoteUsers accordingly.
// Uses the global database handle.
func (o *User) SetRemoteUsersG(insert bool, related ...*RemoteUser) error {
	return o.SetRemoteUsers(boil.GetDB(), insert, related...)
}

// SetRemoteUsersP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's RemoteUsers accordingly.
// Replaces o.R.RemoteUsers with related.
// Sets related.R.User's RemoteUsers accordingly.
// Panics on error.
func (o *User) SetRemoteUsersP(exec boil.Executor, insert bool, related ...*RemoteUser) {
	if err := o.SetRemoteUsers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRemoteUsersGP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's RemoteUsers accordingly.
// Replaces o.R.RemoteUsers with related.
// Sets related.R.User's RemoteUsers accordingly.
// Uses the global database handle and panics on error.
func (o *User) SetRemoteUsersGP(insert bool, related ...*RemoteUser) {
	if err := o.SetRemoteUsers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRemoteUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's RemoteUsers accordingly.
// Replaces o.R.RemoteUsers with related.
// Sets related.R.User's RemoteUsers accordingly.
func (o *User) SetRemoteUsers(exec boil.Executor, insert bool, related ...*RemoteUser) error {
	query := "update \"remote_users\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RemoteUsers {
			rel.UserID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}

		o.R.RemoteUsers = nil
	}
	return o.AddRemoteUsers(exec, insert, related...)
}

// RemoveRemoteUsersG relationships from objects passed in.
// Removes related items from R.RemoteUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle.
func (o *User) RemoveRemoteUsersG(related ...*RemoteUser) error {
	return o.RemoveRemoteUsers(boil.GetDB(), related...)
}

// RemoveRemoteUsersP relationships from objects passed in.
// Removes related items from R.RemoteUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Panics on error.
func (o *User) RemoveRemoteUsersP(exec boil.Executor, related ...*RemoteUser) {
	if err := o.RemoveRemoteUsers(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRemoteUsersGP relationships from objects passed in.
// Removes related items from R.RemoteUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle and panics on error.
func (o *User) RemoveRemoteUsersGP(related ...*RemoteUser) {
	if err := o.RemoveRemoteUsers(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRemoteUsers relationships from objects passed in.
// Removes related items from R.RemoteUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *User) RemoveRemoteUsers(exec boil.Executor, related ...*RemoteUser) error {
	var err error
	for _, rel := range related {
		rel.UserID.Valid = false
		if rel.R != nil {
			rel.R.User = nil
		}
		if err = rel.Update(exec, "user_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RemoteUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.RemoteUsers)
			if ln > 1 && i < ln-1 {
				o.R.RemoteUsers[i] = o.R.RemoteUsers[ln-1]
			}
			o.R.RemoteUsers = o.R.RemoteUsers[:ln-1]
			break
		}
	}

	return nil
}

// UsersG retrieves all records.
func UsersG(mods ...qm.QueryMod) userQuery {
	return Users(boil.GetDB(), mods...)
}

// Users retrieves all the records using an executor.
func Users(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	return userQuery{NewQuery(exec, mods...)}
}

// FindUserG retrieves a single record by ID.
func FindUserG(id int, selectCols ...string) (*User, error) {
	return FindUser(boil.GetDB(), id, selectCols...)
}

// FindUserGP retrieves a single record by ID, and panics on error.
func FindUserGP(id int, selectCols ...string) *User {
	retobj, err := FindUser(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(exec boil.Executor, id int, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users")
	}

	return userObj, nil
}

// FindUserP retrieves a single record by ID with an executor, and panics on error.
func FindUserP(exec boil.Executor, id int, selectCols ...string) *User {
	retobj, err := FindUser(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *User) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *User) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *User) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *User) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single User record. See Update for
// whitelist behavior description.
func (o *User) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single User record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *User) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the User, and panics on error.
// See Update for whitelist behavior description.
func (o *User) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the User.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *User) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userColumns,
			userPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update users row")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for users")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in user slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *User) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *User) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *User) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *User) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userColumns,
			userPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single User record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *User) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single User record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *User) DeleteG() error {
	if o == nil {
		return errors.New("models: no User provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single User record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *User) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from users")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from users")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no User slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no User slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user slice")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *User) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *User) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *User) ReloadG() error {
	if o == nil {
		return errors.New("models: no User provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(exec boil.Executor) error {
	ret, err := FindUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	users := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&users)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSlice")
	}

	*o = users

	return nil
}

// UserExists checks if the User row exists.
func UserExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users exists")
	}

	return exists, nil
}

// UserExistsG checks if the User row exists.
func UserExistsG(id int) (bool, error) {
	return UserExists(boil.GetDB(), id)
}

// UserExistsGP checks if the User row exists. Panics on error.
func UserExistsGP(id int) bool {
	e, err := UserExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserExistsP checks if the User row exists. Panics on error.
func UserExistsP(exec boil.Executor, id int) bool {
	e, err := UserExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
