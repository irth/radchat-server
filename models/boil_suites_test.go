// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuthTokens", testAuthTokens)
	t.Run("Friendships", testFriendships)
	t.Run("Messages", testMessages)
	t.Run("RemoteUsers", testRemoteUsers)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensDelete)
	t.Run("Friendships", testFriendshipsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("RemoteUsers", testRemoteUsersDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensQueryDeleteAll)
	t.Run("Friendships", testFriendshipsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("RemoteUsers", testRemoteUsersQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensSliceDeleteAll)
	t.Run("Friendships", testFriendshipsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("RemoteUsers", testRemoteUsersSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensExists)
	t.Run("Friendships", testFriendshipsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("RemoteUsers", testRemoteUsersExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensFind)
	t.Run("Friendships", testFriendshipsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("RemoteUsers", testRemoteUsersFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensBind)
	t.Run("Friendships", testFriendshipsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("RemoteUsers", testRemoteUsersBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensOne)
	t.Run("Friendships", testFriendshipsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("RemoteUsers", testRemoteUsersOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensAll)
	t.Run("Friendships", testFriendshipsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("RemoteUsers", testRemoteUsersAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensCount)
	t.Run("Friendships", testFriendshipsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("RemoteUsers", testRemoteUsersCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensHooks)
	t.Run("Friendships", testFriendshipsHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("RemoteUsers", testRemoteUsersHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensInsert)
	t.Run("AuthTokens", testAuthTokensInsertWhitelist)
	t.Run("Friendships", testFriendshipsInsert)
	t.Run("Friendships", testFriendshipsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("RemoteUsers", testRemoteUsersInsert)
	t.Run("RemoteUsers", testRemoteUsersInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthTokenToUserUsingUser", testAuthTokenToOneUserUsingUser)
	t.Run("FriendshipToUserUsingUser", testFriendshipToOneUserUsingUser)
	t.Run("FriendshipToUserUsingFriend", testFriendshipToOneUserUsingFriend)
	t.Run("MessageToUserUsingSender", testMessageToOneUserUsingSender)
	t.Run("MessageToUserUsingTarget", testMessageToOneUserUsingTarget)
	t.Run("RemoteUserToUserUsingUser", testRemoteUserToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToAuthTokens", testUserToManyAuthTokens)
	t.Run("UserToFriendships", testUserToManyFriendships)
	t.Run("UserToFriendFriendships", testUserToManyFriendFriendships)
	t.Run("UserToSenderMessages", testUserToManySenderMessages)
	t.Run("UserToTargetMessages", testUserToManyTargetMessages)
	t.Run("UserToRemoteUsers", testUserToManyRemoteUsers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthTokenToUserUsingUser", testAuthTokenToOneSetOpUserUsingUser)
	t.Run("FriendshipToUserUsingUser", testFriendshipToOneSetOpUserUsingUser)
	t.Run("FriendshipToUserUsingFriend", testFriendshipToOneSetOpUserUsingFriend)
	t.Run("MessageToUserUsingSender", testMessageToOneSetOpUserUsingSender)
	t.Run("MessageToUserUsingTarget", testMessageToOneSetOpUserUsingTarget)
	t.Run("RemoteUserToUserUsingUser", testRemoteUserToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AuthTokenToUserUsingUser", testAuthTokenToOneRemoveOpUserUsingUser)
	t.Run("FriendshipToUserUsingUser", testFriendshipToOneRemoveOpUserUsingUser)
	t.Run("FriendshipToUserUsingFriend", testFriendshipToOneRemoveOpUserUsingFriend)
	t.Run("RemoteUserToUserUsingUser", testRemoteUserToOneRemoveOpUserUsingUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToAuthTokens", testUserToManyAddOpAuthTokens)
	t.Run("UserToFriendships", testUserToManyAddOpFriendships)
	t.Run("UserToFriendFriendships", testUserToManyAddOpFriendFriendships)
	t.Run("UserToSenderMessages", testUserToManyAddOpSenderMessages)
	t.Run("UserToTargetMessages", testUserToManyAddOpTargetMessages)
	t.Run("UserToRemoteUsers", testUserToManyAddOpRemoteUsers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("UserToAuthTokens", testUserToManySetOpAuthTokens)
	t.Run("UserToFriendships", testUserToManySetOpFriendships)
	t.Run("UserToFriendFriendships", testUserToManySetOpFriendFriendships)
	t.Run("UserToRemoteUsers", testUserToManySetOpRemoteUsers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("UserToAuthTokens", testUserToManyRemoveOpAuthTokens)
	t.Run("UserToFriendships", testUserToManyRemoveOpFriendships)
	t.Run("UserToFriendFriendships", testUserToManyRemoveOpFriendFriendships)
	t.Run("UserToRemoteUsers", testUserToManyRemoveOpRemoteUsers)
}

func TestReload(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensReload)
	t.Run("Friendships", testFriendshipsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("RemoteUsers", testRemoteUsersReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensReloadAll)
	t.Run("Friendships", testFriendshipsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("RemoteUsers", testRemoteUsersReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensSelect)
	t.Run("Friendships", testFriendshipsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("RemoteUsers", testRemoteUsersSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensUpdate)
	t.Run("Friendships", testFriendshipsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("RemoteUsers", testRemoteUsersUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensSliceUpdateAll)
	t.Run("Friendships", testFriendshipsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("RemoteUsers", testRemoteUsersSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("AuthTokens", testAuthTokensUpsert)
	t.Run("Friendships", testFriendshipsUpsert)
	t.Run("Messages", testMessagesUpsert)
	t.Run("RemoteUsers", testRemoteUsersUpsert)
	t.Run("Users", testUsersUpsert)
}
